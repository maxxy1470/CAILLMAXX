const datefns = require("date-fns");
const chalk = require("chalk");
const path = require("path");
const fs = require("fs");

const wfmDateFormat = date => datefns.format(date, "YYYYMMDD");

const safeXml = (val, index, proc = x => x) =>
  val == null ? null : proc(val[index]);

const findCustomField = (fields, name, type) => {
  const field = fields.find(x => x.Name[0] === name);
  if (field == null) return null;
  return field[type][0];
};

const bar = (val, total) => {
  const pip = "▮"; //"▰";
  const empt = "▯"; //"▱";
  const w = 24;
  const valPips = Math.min(w, (val / total) * w);
  const otherPips = Math.ceil(w - valPips);

  const color = val > total ? "red" : val / total > 0.75 ? "yellow" : "green";

  const barStr = `${chalk[color](pip.repeat(valPips))}${empt.repeat(
    otherPips
  )}`;
  const percentage = `${((val / total) * 100).toFixed(0)}%`;
  const hours = `(${chalk[color]((val / 60).toFixed(2))} / ${(
    total / 60
  ).toFixed(2)} hours)`;

  const arr = [barStr];
  if (total > 0) {
    arr.push(percentage);
  }
  arr.push(hours);

  return arr.join("  ");
};

const findEnvFile = () => {
  let filePath = process.cwd();
  do {
    const file = path.join(filePath, "project.yaml");
    if (fs.existsSync(file)) {
      return fs.readFileSync(file, "utf8");
    }
    filePath = path.resolve(filePath, "..");
  } while (filePath != path.resolve(filePath, ".."));
  return null;
};

module.exports = {
  wfmDateFormat: wfmDateFormat,
  safeXml: safeXml,
  findCustomField: findCustomField,
  bar: bar,
  findEnvFile: findEnvFile
};
