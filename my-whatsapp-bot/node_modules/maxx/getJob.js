const wfm = require("./wfm");
const util = require("./util");
const safeXml = util.safeXml;

module.exports = jobNum => {
  const getJob = wfm
    .get(`/job.api/get/${jobNum}`)
    .then(res => res.Response.Job[0])
    .then(x => ({
      jobId: x.ID[0],
      name: x.Name[0],
      state: x.State[0],
      budget: safeXml(x.Budget, 0, v => parseFloat(v)),
      startDate: safeXml(x.StartDate, 0, val => new Date(val)),
      dueDate: safeXml(x.DueDate, 0, val => new Date(val)),
      completedDate: safeXml(x.CompletedDate, 0, val => new Date(val)),
      wfmInternalId: safeXml(x.InternalID, 0, val => parseInt(val, 10)),
      managerId: safeXml(x.Manager, 0, val => parseInt(val.ID[0], 10)),
      clientId: safeXml(x.Client, 0, val => parseInt(val.ID[0], 10)),
      tasks: (x.Tasks[0].Task || []).map(t => {
        return {
          taskId: parseInt(t.ID[0], 10),
          billable: t.Billable[0].toLowerCase() === "true",
          jobId: x.ID[0],
          name: t.Name[0],
          estimatedMinutes: parseInt(t.EstimatedMinutes[0], 10)
        };
      })
    }));

  const times = wfm
    .get(`/time.api/job/${jobNum}`)
    .then(res => res.Response.Times[0].Time)
    .then((times = []) =>
      times.map(x => ({
        logId: x.ID[0],
        jobId: x.Job[0].ID[0],
        taskId: x.Task[0].ID[0],
        workflowMaxEmployeeId: parseInt(x.Staff[0].ID[0]),
        date: new Date(x.Date[0]),
        minutes: parseInt(x.Minutes[0], 10)
      }))
    );

  return Promise.all([getJob, times]).then(([job, ts]) => {
    job.tasks = job.tasks.map(x => ({
      name: x.name,
      budget: x.estimatedMinutes,
      billable: x.billable,
      usedMinutes: ts
        .filter(t => parseInt(t.taskId, 10) === x.taskId)
        .map(t => t.minutes)
        .reduce((acc, val) => acc + val, 0)
    }));
    return job;
  });
};
