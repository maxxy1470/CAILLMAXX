{
  "manifest": {
    "name": "prompt-sync",
    "version": "4.2.0",
    "description": "a synchronous prompt for node.js",
    "main": "index.js",
    "scripts": {
      "test": "node test"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/heapwolf/prompt-sync.git"
    },
    "keywords": [
      "prompt",
      "sync",
      "blocking",
      "readline",
      "input",
      "getline",
      "repl",
      "history"
    ],
    "contributors": [
      {
        "name": "Paolo Fragomeni",
        "email": "paolo@async.ly"
      },
      {
        "name": "David Mark Clements",
        "email": "david.clements@nearform.com"
      }
    ],
    "license": "MIT",
    "devDependencies": {
      "prompt-sync-history": "^1.0.1"
    },
    "dependencies": {
      "strip-ansi": "^5.0.0"
    },
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-prompt-sync-4.2.0-0198f73c5b70e3b03e4b9033a50540a7c9a1d7f4-integrity/node_modules/prompt-sync/package.json",
    "readmeFilename": "README.md",
    "readme": "# SYNOPSIS\nA sync prompt for node. very simple. no C++ bindings and no bash scripts.\n\nWorks on Linux, OS X and Windows.\n\n# BASIC MODE\n```js\n\nvar prompt = require('prompt-sync')();\n//\n// get input from the user.\n//\nvar n = prompt('How many more times? ');\n```\n# WITH HISTORY\n\nHistory is an optional extra, to use simply install the history plugin. \n\n```sh\nnpm install --save prompt-sync-history\n```\n\n```js\nvar prompt = require('prompt-sync')({\n  history: require('prompt-sync-history')() //open history file\n});\n//get some user input\nvar input = prompt()\nprompt.history.save() //save history back to file\n```\n\nSee the [prompt-sync-history](http://npm.im/prompt-sync-history) module\nfor options, or fork it for customized behaviour. \n\n# API\n\n## `require('prompt-sync')(config) => prompt` \n\nReturns an instance of the `prompt` function.\nTakes `config` option with the following possible properties\n\n`sigint`: Default is `false`. A ^C may be pressed during the input process to abort the text entry. If sigint it `false`, prompt returns `null`. If sigint is `true` the ^C will be handled in the traditional way: as a SIGINT signal causing process to exit with code 130.\n\n`eot`: Default is `false`. A ^D pressed as the first character of an input line causes prompt-sync to echo `exit` and exit the process with code 0.\n\n`autocomplete`: A completer function that will be called when user enters TAB to allow for autocomplete. It takes a string as an argument an returns an array of strings that are possible matches for completion. An empty array is returned if there are no matches.\n\n`history`: Takes an object that supplies a \"history interface\", see [prompt-sync-history](http://npm.im/prompt-sync-history) for an example.\n\n## `prompt(ask, value, opts)`\n\n`ask` is the label of the prompt, `value` is the default value\nin absence of a response. \n\nThe `opts` argument can also be in the first or second parameter position.\n\nOpts can have the following properties\n\n`echo`: Default is `'*'`. If set the password will be masked with the specified character. For hidden input, set echo to `''` (or use `prompt.hide`).\n\n`autocomplete`: Overrides the instance `autocomplete` function to allow for custom \nautocompletion of a particular prompt.\n\n`value`: Same as the `value` parameter, the default value for the prompt. If `opts`\nis in the third position, this property will *not* overwrite the `value` parameter.\n\n`ask`: Sames as the `value` parameter. The prompt label. If `opts` is not in the first position, the `ask` parameter will *not* be overridden by this property.\n\n## `prompt.hide(ask)`\n\nConvenience method for creating a standard hidden password prompt, \nthis is the same as `prompt(ask, {echo: ''})`\n\n\n# LINE EDITING\nLine editing is enabled in the non-hidden mode. (use up/down arrows for history and backspace and left/right arrows for editing)\n\nHistory is not set when using hidden mode.\n\n# EXAMPLES\n\n```js\n  //basic:\n  console.log(require('prompt-sync')()('tell me something about yourself: '))\n\n  var prompt = require('prompt-sync')({\n    history: require('prompt-sync-history')(),\n    autocomplete: complete(['hello1234', 'he', 'hello', 'hello12', 'hello123456']),\n    sigint: false\n  });\n\n  var value = 'frank';\n  var name = prompt('enter name: ', value);\n  console.log('enter echo * password');\n  var pw = prompt({echo: '*'});\n  var pwb = prompt('enter hidden password (or don\\'t): ', {echo: '', value: '*pwb default*'})\n  var pwc = prompt.hide('enter another hidden password: ')\n  var autocompleteTest = prompt('custom autocomplete: ', {\n    autocomplete: complete(['bye1234', 'by', 'bye12', 'bye123456'])\n  });\n\n  prompt.history.save();\n\n  console.log('\\nName: %s\\nPassword *: %s\\nHidden password: %s\\nAnother Hidden password: %s', name, pw, pwb, pwc);\n  console.log('autocomplete2: ', autocompleteTest);\n\n  function complete(commands) {\n    return function (str) {\n      var i;\n      var ret = [];\n      for (i=0; i< commands.length; i++) {\n        if (commands[i].indexOf(str) == 0)\n          ret.push(commands[i]);\n      }\n      return ret;\n    };\n  };\n```\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2014-2019 Paolo Fragomeni & David Mark Clements\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/prompt-sync/-/prompt-sync-4.2.0.tgz#0198f73c5b70e3b03e4b9033a50540a7c9a1d7f4",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/prompt-sync/-/prompt-sync-4.2.0.tgz",
    "hash": "0198f73c5b70e3b03e4b9033a50540a7c9a1d7f4",
    "integrity": "sha512-BuEzzc5zptP5LsgV5MZETjDaKSWfchl5U9Luiu8SKp7iZWD5tZalOxvNcZRwv+d2phNFr8xlbxmFNcRKfJOzJw==",
    "registry": "npm",
    "packageName": "prompt-sync",
    "cacheIntegrity": "sha512-BuEzzc5zptP5LsgV5MZETjDaKSWfchl5U9Luiu8SKp7iZWD5tZalOxvNcZRwv+d2phNFr8xlbxmFNcRKfJOzJw== sha1-AZj3PFtw47A+S5AzpQVAp8mh1/Q="
  },
  "registry": "npm",
  "hash": "0198f73c5b70e3b03e4b9033a50540a7c9a1d7f4"
}